openapi: 3.0.2
info:
  title: PubRouter API
  description: PubRouter's API - used for checking metadata, sending submissions and editing repository config.
  version: '3'
servers:
  - url: 'https://pubrouter.jisc.ac.uk/api/v3'
    description: "PubRouter LIVE"
  - url: 'https://uat.pubrouter.jisc.ac.uk/api/v3'
    description: "PubRouter UAT"
tags:
- name: "Institution Matching Parameters"
- name: "Publisher"
  description: "Used by publishers to submit articles to PubRouter"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/jisc-services/Public-Documentation/blob/development/PublicationsRouter/api/v3/Send.md"
- name: "Retrieving Notifications"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/jisc-services/Public-Documentation/blob/development/PublicationsRouter/api/v3/Retrieve.md"
security:
  - ApiKeyAuth: []
paths:
  /config:
    get:
      tags:
        - Institution Matching Parameters
      summary: Retrieve the matching parameter configuration associated with the supplied API key.
      description: The matching parameters which are used by PubRouter to determine if an article is relevant to an institution are returned as a JSON object. <a href=https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/MatchingConfig.md>See here</a> for more information.
      responses:
        '200':
          description: 200 OK - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchingParametersSuccess'
        '401':
          $ref: '#/components/responses/BadApiKey'
    post:
      tags:
        - Institution Matching Parameters
      summary: Set the matching parameter configuration associated with the supplied API key.
      description: Used to set an institution's matching parameters.  (Note that it replaces any existing configuration).  It uses the same JSON object that is returned by the GET method.  <a href=https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/MatchingConfig.md>See here</a> for more information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchingParameters"
          text/csv:
            schema:
              type: string
              format: binary
              example: |
                Name Variants,Domains,Postcodes,Grant Numbers,ORCIDs,Author Emails
                University of Jisc,jisc.ac.uk,BS20JA,0000-5555,0000-1111-2222-3333,someone@jisc.ac.uk
      responses:
        '204':
           $ref: '#/components/responses/NoContent'
        '400':
          description: Invalid submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'
  /validate:
    post:
      tags:
        - Publisher
      summary: Validate an article submission.
      description: >
        Use this endpoint to test your intended submission to PubRouter. It does not update PubRouter, but validates the structure of your POST request, returning details of any problems.<br>
        You can submit just article metadata as a JSON package.<br>
        Alternatively if you have both metadata and the article text you will need to make a multipart deposit (with a content-type of 'multipart/related').  NOTE that the current version of swagger does not support this so it is not possible to test it here.<br>
        <a href=https://github.com/jisc-services/Public-Documentation/blob/development/PublicationsRouter/api/v3/IncomingNotification.md#json-data-structure>See here</a> for further information on the JSON metadata structure.
      requestBody:
        $ref: '#/components/requestBodies/SingleNotificationValidate'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'
  /validate/list:
    post:
      tags:
        - Publisher
      summary: Validate multiple metadata-only articles submitted as a list
      description: >
        Use this endpoint to test your intended submission to PubRouter of metadata for multiple articles. It does not update PubRouter, but validates the structure of your POST request, returning details of any problems. <br>
        You can submit only article metadata  as a list of JSON objects.<br>
        <a href=https://github.com/jisc-services/Public-Documentation/blob/development/PublicationsRouter/api/v3/IncomingNotification.md#json-data-structure>See here</a> for further information on the JSON metadata structure.
      requestBody:
        $ref: '#/components/requestBodies/ListNotification'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'
  /notification:
    post:
      tags:
        - Publisher
      summary: Send an article notification to PubRouter
      description: >
        Send an article notification to PubRouter either as a JSON object (for metadata only notification) or as a multipart request (with a content-type of 'multipart/related').  NOTE that the current version of swagger does not support this so it is not possible to test it here.<br>
        <a href=https://github.com/jisc-services/Public-Documentation/blob/development/PublicationsRouter/api/v3/IncomingNotification.md#json-data-structure>See here</a> for further information on the JSON metadata structure.
      requestBody:
        $ref: '#/components/requestBodies/SingleNotification'
      responses:
        '201':
          description: 201 - Created. Valid submission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'
  /notification/list:
    post:
      tags:
        - Publisher
      summary: Send a list of metadata only notifications to PubRouter
      description: >
        Send multiple article notifications as a list of JSON objects.
        <a href=https://github.com/jisc-services/Public-Documentation/blob/development/PublicationsRouter/api/v3/IncomingNotification.md#json-data-structure>See here</a> for further information on the JSON metadata structure.
      requestBody:
        $ref: '#/components/requestBodies/ListNotification'
      responses:
        '201':
          description: 201 - Created. All of the metadata was valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListSuccess'
        '202':
          description: 202 - Accepted. Some of the metadata was valid, but there was also some errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'
  /notification/{notificationId}:
    get:
      tags:
        - Retrieving Notifications
      parameters:
        - $ref: '#/components/parameters/NotificationID'
      summary: Get the metadata for a specific notification
      responses:
        '200':
          description: 200 - Notification found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONNote'
        '404':
          description: 404 - No notification found.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
  /notification/{notificationId}/content:
    get:
      tags:
        - Retrieving Notifications
      parameters:
        - $ref: '#/components/parameters/NotificationID'
      summary: Retrieve the zipped content (metadata and article text) of a notification.
      description: If available. returns the original zip file containing notification metadata  and article text if supplied.
      responses:
        '200':
          description: 200 - Found notification and returned content.
          content:
            application/zip:
              schema:
                type: string
                format: binary
                example: <zip content>
        '401':
          $ref: '#/components/responses/BadApiKey'
  /routed:
    get:
      tags:
        - Retrieving Notifications
      parameters:
        - $ref: '#/components/parameters/RoutedSince'
        - $ref: '#/components/parameters/RoutedPage'
        - $ref: '#/components/parameters/RoutedPageSize'
      summary: Get a list of notifications that were routed since a given date.
      responses:
        '200':
          description: 200 - There were some notifications after the since date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutedSuccess'
              examples:
                '0':
                  value: '[]'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: api_key
      example: (UUID)

  parameters:
    NotificationID: 
      in: path
      name: notificationId
      required: true
      schema:
        type: string
      description: Notification ID
      example: 149f72cb93e345708cf924e432d4f996
    
    RoutedSince:
      in: query
      name: since
      required: true
      schema:
        type: string
      description: Date to collect notifications from. Format is YYYY-MM-DD.
      example: "2018-08-08"
      
    RoutedPage:
      in: query
      name: page
      schema:
        type: string
      description: Result page
      example: 1
    
    RoutedPageSize:
      in: query
      name: pageSize
      schema:
        type: string
      description: Size of result page. Up to 1000.
      example: 25

  requestBodies:
    SingleNotificationValidate:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              metadata:
                type: string
                format: binary
              content:
                type: string
                format: binary
          encoding:
            metadata:
              contentType: application/json
            content:
              contentType: application/zip
        application/json:
          schema:
            $ref: '#/components/schemas/JSONNote'
    SingleNotification:
      content:
        multipart/related:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/JSONNote'
              content:
                type: string
                format: binary
          encoding:
            metadata:
              contentType: application/json
            content:
              contentType: application/zip
        application/json:
          schema:
            $ref: '#/components/schemas/JSONNote'
    ListNotification:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONNoteList'

  schemas:
    MatchingParameters:
      type: object
      properties:
        name_variants:
          type: array
          items:
            type: string
            example: "University of Jisc"
        postcodes:
          type: array
          items:
            type: string
            example: "BS20JA"
        domains:
          type: array
          items:
            type: string
            example: "jisc.ac.uk"
        grants:
          type: array
          items:
            type: string
            example: "0000-5555"
        author_ids:
          type: array
          items:
            $ref: "#/components/schemas/NoteIdentifier"
    MatchingParametersSuccess:
      type: object
      properties:
        name_variants:
          type: array
          items:
            type: string
            example: "University of Jisc"
        postcodes:
          type: array
          items:
            type: string
            example: "BS20JA"
        domains:
          type: array
          items:
            type: string
            example: "jisc.ac.uk"
        grants:
          type: array
          items:
            type: string
            example: "0000-5555"
        author_ids:
          type: array
          items:
            $ref: "#/components/schemas/NoteIdentifier"
        id:
          type: string
          example: "(UUID)"
        repository:
          type: string
          example: "(UUID)"
        created_date:
          type: string
          format: date
        last_updated:
          type: string
          format: date
    BadRequest:
      type: object
      properties:
        error:
          type: string
          example: "Your request contained an error."
    NotificationSuccess:
      type: object
      properties:
        id:
          type: string
          example: "149f72cb93e345708cf924e432d4f996"
        location:
          type: string
          example: "/notification/149f72cb93e345708cf924e432d4f996"
    NotificationListSuccess:
      type: object
      properties:
        successful:
          type: integer
          example: 1
        total:
          type: integer
          example: 2
        success_ids:
          type: array
          items:
            type: string
            example: "1"
        fail_ids:
          type: array
          items:
            type: string
            example: "2"
        last_error:
          type: string
          example: "Notification with ID '2' was an invalid notification"
    RoutedSuccess:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/JSONNote'
        timestamp:
          type: string
          format: date
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 25
        total:
          type: integer
          example: 1234
        since:
          type: string
          format: date  
    JSONNoteList:
      type: array
      items:
        type: object
        properties:
          notification:
            $ref: '#/components/schemas/JSONNote'
          id:
            type: string
    JSONNote:
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/NoteProvider'
        content:
          $ref: '#/components/schemas/NoteContent'
        links:
          type: array
          items:
            $ref: '#/components/schemas/NoteLink'
        metadata:
          $ref: '#/components/schemas/NoteMetadata'
    NoteProvider:
      type: object
      properties:
        agent:
          type: string
          example: Elsevier
    NoteContent:
      type: object
      properties:
        packaging_format:
          type: string
          example: https://purl.org/net/SimpleZip
    NoteLink:
      type: object
      properties:
        format:
          type: string
          example: application/pdf
        url:
          type: string
    NoteMetadata:
      type: object
      properties:
        journal:
          $ref: '#/components/schemas/NoteJournal'
        article:
          $ref: '#/components/schemas/NoteArticle'
        contributor:
          type: array
          items:
            $ref: '#/components/schemas/NoteContributor'
        author:
          type: array
          items:
            $ref: '#/components/schemas/NoteContributor'
        accepted_date:
          type: string
          format: date
        publication_date:
          $ref: '#/components/schemas/NotePublicationDate'
        history_date:
          type: array
          items:
            $ref: '#/components/schemas/NoteHistoryDate'
        publication_status:
          type: string
        funding:
          type: array
          items:
            $ref: '#/components/schemas/NoteFunding'
        embargo:
          $ref: '#/components/schemas/NoteEmbargo'
        license_ref:
          type: array
          items:
            $ref: '#/components/schemas/NoteLicenseRef'
        free2read:
          $ref: '#/components/schemas/NoteFree2Read'
        refereed:
          type: string
          example: true
    NoteIdentifier:
      type: object
      properties:
        'type':
          type: string
        id:
          type: string
    NoteJournal:
      type: object
      properties:
        title:
          type: string
          example: Journal Title
        abbrev_title:
          type: string
          example: Abbreviated journal title
        volume:
          type: string
          example: "12"
        issue:
          type: string
          example: "32"
        publisher:
          type: array
          items:
            type: string
            example: Elsevier
        identifier:
          type: array
          items:
            $ref: '#/components/schemas/NoteIdentifier'
    NoteArticle:
      type: object
      properties:
        title:
          type: string
          example: Article title
        sub_title:
          type: array
          items:
            type: string
            example: Article subtitle
        'type':
          type: string
          example: Review
        start_page:
          type: string
          example: 1
        end_page:
          type: string
          example: 10
        page_range:
          type: string
          example: "1-10"
        num_pages:
          type: integer
          example: 10
        language:
          type: array
          items:
            type: string
            example: English
        abstract:
          type: string
          example: Article abstract
        identifier:
          type: array
          items:
            $ref: '#/components/schemas/NoteIdentifier'
        subject:
          type: array
          items:
            type: string
            example: Article subject
    NoteContributor:
      type: object
      properties:
        'type':
          type: string
          example: Author type
        name:
          $ref: '#/components/schemas/NoteContributorName'
        organisation_name:
          type: string
          example: Jisc
        identifier:
          type: array
          items:
            $ref: '#/components/schemas/NoteIdentifier'
        affiliation:
          type: string
          example: Jisc United Kingdom
    NoteContributorName:
      type: object
      properties:
        firstname:
          type: string
          example: John
        surname:
          type: string
          example: Doe
        fullname:
          type: string
          example: John Doe
        suffix:
          type: string
          example: Sr.
    NotePublicationDate:
      type: object
      properties:
        publication_format:
          type: string
        date:
          type: string
          format: date
        year:
          type: integer
          example: 2018
        month:
          type: integer
          example: 8
        day:
          type: integer
          example: 20
    NoteHistoryDate:
      type: object
      properties:
        date_type:
          type: string
        date:
          type: string
          format: date
    NoteFunding:
      type: object
      properties:
        name:
          type: string
          example: Funder
        identifier:
          type: array
          items:
            $ref: '#/components/schemas/NoteIdentifier'
        grant_numbers:
          type: array
          items:
            type: string
    NoteEmbargo:
      type: object
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date
        duration:
          type: integer
          example: 12
    NoteLicenseRef:
      type: object
      properties:
        title:
          type: string
          example: CC-By
        'type':
          type: string
        url:
          type: string
          example: https://creativecommons.org/licenses/by-nc-sa/4.0/
        version:
          type: string
          example: 4.0
        start:
          type: string
    NoteFree2Read:
      type: object
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date

  responses:
    BadRequest:
      description: 400 - Bad request. Invalid submission
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    NoContent:
      description: 204 - No Content. Valid request
    BadApiKey:
      description: 401 - Unauthenticated. Missing/incorrect API key, or incorrect user type.
      content:
        application/json:
          examples:
            '0':
              value: |
                {
                  "error": "A valid API key is required."
                }