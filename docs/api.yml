openapi: 3.0.1
info:
  title: Publications Router API
  description: >
    ## Overview

    Jisc [Publications Router](https://pubrouter.jisc.ac.uk/) exposes an API which may be used to interact with it for the purpose of:
     * Retrieving articles (metadata and content) - for use by institutions for populating a repository or CRIS
     * Sending articles (metadata and content) - for use by publishers, sending articles to Publications Router
     * Modifying repository matching parameters configuration - for use by institutions (particularly CRIS).

     See [here](https://github.com/jisc-services/Public-Documentation/tree/master/PublicationsRouter/api/v3) for a full description of the API.

     ## Metadata notes

     ### Licences

     See [Using Router Metadata](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/Using_Router_Metadata.md#licence-details) for important guidance on using and displaying these fields.

     ### ali:free2read

     The ali:free2read information, if present in the `metadata.free2read` element, relates to the article on the publisher's own website. It does not necessarily apply to the article stored in a repository so **you must not rely upon this value**.  This element may be deprecated in a future version of the API.

    ## Retrieving article content

    If content (e.g. article PDF) is available for a notification this will be indicated by the presence of the `links` array in the notification metadata. Examination of link objects within the links array will enable you to select the optimum link for your purpose - **see [Retrieving notification content](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/Retrieve.md#retrieving-notification-content)** in Router's public documentation.

    ## Using this swagger interface

    You can use this page in two ways:
     * As a simple source of information on available endpoints, parameters and data models (i.e. JSON data stuctures) - though note that a fuller description is available [here](https://github.com/jisc-services/Public-Documentation/tree/master/PublicationsRouter/api/v3)
     * An interactive facility for interacting with the API.

    ### Interactive mode

    For full interactive use you will need to do the following:
     * Authorize, using your API key (available on your Publications Router account page)
     * Select the server to interrogate (Live or UAT) corresponding to your credentials
     * Depending on the API request, supply further parameters, such as your Publications Router account ID.

  version: '3'
servers:
  - url: https://uat.pubrouter.jisc.ac.uk/api/v3
    description: Publications Router UAT
  - url: https://pubrouter.jisc.ac.uk/api/v3
    description: Publications Router LIVE
tags:
- name: Institution Matching Parameters
- name: Publisher
  description: Used by publishers to submit articles to Publications Router
  externalDocs:
    description: Find out more
    url: https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/Send.md
- name: Retrieving Notifications
  externalDocs:
    description: Find out more
    url: https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/Retrieve.md
security:
  - ApiKeyAuth: []

paths:
  /config:
    get:
      tags:
        - Institution Matching Parameters
      summary: Retrieve the matching parameter configuration associated with the supplied API key.
      description: The matching parameters which are used by Publications Router to determine if an article is relevant to an institution are returned as a JSON object. [See here](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/MatchingConfig.md)  for more information.
      responses:
        '200':
          description: 200 OK - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchingParametersSuccess'
        '401':
          $ref: '#/components/responses/BadApiKey'
    post:
      tags:
        - Institution Matching Parameters
      summary: Set the matching parameter configuration associated with the supplied API key.
      description: >
        Used to set an institution's matching parameters (note that any existing configuration is replaced).<br><br>
        The parameters may be supplied in 2 ways:
         * using the same [JSON object](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/MatchingConfig.md) that is returned by the GET method
         * via a CSV file ([more information](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/Config.md#csv-submission)).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchingParameters"
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  example: |
                    Name Variants,Domains,Postcodes,Grant Numbers,ORCIDs,Author Emails
                    University of Jisc,jisc.ac.uk,BS20JA,0000-5555,0000-1111-2222-3333,someone@jisc.ac.uk
      responses:
        '204':
           $ref: '#/components/responses/NoContent'
        '400':
          description: Invalid submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'

  /validate:
    post:
      tags:
        - Publisher
      summary: Validate an article submission.
      description: >
        Use this endpoint to test your intended submission to Publications Router. It does not update Publications Router, but validates the structure of your POST request, returning details of any problems.<br><br>
        You can submit just article metadata as a JSON package (with a request content-type of 'application/json').<br><br>
        Alternatively if you have both metadata and the article text you will need to make a multipart deposit (with a content-type of 'multipart/related').  NOTE that Swagger does not currently support this content-type, so we have used "multipart/form-data" so you can see the multipart format and test it (but for live submissions you would need to specify 'multipart/related').<br><br>
        [See here](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/IncomingNotification.md#json-data-structure) for further information on the JSON metadata structure.
      requestBody:
        $ref: '#/components/requestBodies/SingleNotificationValidate'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'

  /validate/list:
    post:
      tags:
        - Publisher
      summary: Validate multiple metadata-only articles submitted as a list
      description: >
        Use this endpoint to test your intended submission to Publications Router of metadata for multiple articles. It does not update Publications Router, but validates the structure of your POST request, returning details of any problems. <br><br>
        You can submit only article metadata  as a list of JSON objects.<br><br>
        [See here](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/IncomingNotification.md#json-data-structure) for further information on the JSON metadata structure.
      requestBody:
        $ref: '#/components/requestBodies/ListNotification'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'

  /notification:
    post:
      tags:
        - Publisher
      summary: Send an article notification to Publications Router
      description: >
        Send an article notification to Publications Router either as a JSON object (for metadata only notification) or as a multipart request (with a content-type of 'multipart/related').  NOTE that the current version of swagger does not support this so it is not possible to test it here.<br><br>
        Further information: [JSON metadata structure](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/IncomingNotification.md#json-data-structure) and [Notification endpoint](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/Send.md#single-notification-submission-post-notification).
      requestBody:
        $ref: '#/components/requestBodies/SingleNotification'
      responses:
        '201':
          description: 201 - Created. Valid submission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'

  /notification/list:
    post:
      tags:
        - Publisher
      summary: Send a list of metadata only notifications to Publications Router
      description: >
        Send multiple article notifications as a list of JSON objects.<br><br>
        Further information: [JSON metadata structure](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/IncomingNotification.md#json-data-structure) and [Notification list endpoint](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/Send.md#multiple-metadata-only-notifications-submission-post-notificationlist).
      requestBody:
        $ref: '#/components/requestBodies/ListNotification'
      responses:
        '201':
          description: 201 - Created. All of the metadata was valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListCreated'
        '202':
          description: 202 - Accepted. Some of the metadata was valid, but there was also some errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListAccepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadApiKey'

  /routed/{repositoryId}:
    get:
      tags:
        - Retrieving Notifications
      parameters:
        - $ref: '#/components/parameters/RepositoryID'
        - $ref: '#/components/parameters/RoutedSince'
        - $ref: '#/components/parameters/RoutedPage'
        - $ref: '#/components/parameters/RoutedPageSize'
      summary: Retrieve a list of notifications routed to a specified repository.
      description: >
        This endpoint returns a list of all notifications that have been routed to the specified repository since a particular date.<br><br>
        The {RepositoryId} is the hexadecimal repository identifier (available from the Publications Router repository account page).<br><br>
        The notification metadata structure returned by an API request will only have elements for which data exists; where no data is available the element will be omitted from the structure.
      responses:
        '200':
          description: 200 - There were some notifications after the since date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutedSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'

  /notification/{notificationId}:
    get:
      tags:
        - Retrieving Notifications
      parameters:
        - $ref: '#/components/parameters/NotificationID'
      summary: Retrieve the metadata for a specific notification
      description: >
        The notification metadata structure returned by an API request will only have elements for which data exists; where no data is available the element will be omitted from the structure.
      responses:
        '200':
          description: 200 - Notification found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '404':
          description: 404 - No notification found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'

  /notification/{notificationId}/content:
    get:
      tags:
        - Retrieving Notifications
      parameters:
        - $ref: '#/components/parameters/NotificationID'
      summary: Retrieve the zipped content (metadata and article text) of a notification.
      description: >
        Returns a zip file containing notification metadata and article text if supplied by a publisher to Publications Router.<br><br>

        <b>IMPORTANT</b>: When retrieving content you should use the information supplied in a notification `links` array, particularly values of the `access`, `type` and `format` elements within each link object, to decide which `url` to use. For further information see Router's public documentation [Retrieving notification content](https://github.com/jisc-services/Public-Documentation/blob/master/PublicationsRouter/api/v3/Retrieve.md#retrieving-notification-content).

      responses:
        '200':
          description: 200 - Found notification and returned content.
          content:
            application/zip:
              schema:
                type: string
                format: binary
                example: <zip content>
        '401':
          $ref: '#/components/responses/BadApiKey'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: api_key

  parameters:
    RepositoryID:
      in: path
      name: repositoryId
      required: true
      schema:
        type: string
      description: Repository ID - a hexadecimal string, like e6f073baa57b46b2b6ac621e7f02583a.
      example: e6f073baa57b46b2b6ac621e7f02583a

    NotificationID:
      in: path
      name: notificationId
      required: true
      schema:
        type: string
      description: Notification ID - a hexadecimal string, like 149f72cb93e345708cf924e432d4f996.
      example: 149f72cb93e345708cf924e432d4f996

    RoutedSince:
      in: query
      name: since
      required: true
      schema:
        type: string
      description: Timestamp with format `yyyy-mm-ddThh:mm:ssZ` from which to collect notifications. Also accepts dates with format `yyyy-mm-dd`, where the date is converted to a timestamp set to midnight UTC.
      example: "2018-08-08T00:00:00Z"

    RoutedPage:
      in: query
      name: page
      schema:
        type: string
      description: Page number to retrieve when more than one page of results is returned.<br> [OPTIONAL, defaults to 1].
      example: 1

    RoutedPageSize:
      in: query
      name: pageSize
      schema:
        type: string
      description: Maximum number of results to be returned per page, in range 1 - 100.<br>[OPTIONAL, defaults to 25]
      example: 25

  requestBodies:
    SingleNotificationValidate:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              metadata:
                type: string
                format: binary
              content:
                type: string
                format: binary
          encoding:
            metadata:
              contentType: application/json
            content:
              contentType: application/zip
        application/json:
          schema:
            $ref: '#/components/schemas/PostNote'
    SingleNotification:
      content:
        multipart/related:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/PostNote'
              content:
                type: string
                format: binary
          encoding:
            metadata:
              contentType: application/json
            content:
              contentType: application/zip
        application/json:
          schema:
            $ref: '#/components/schemas/PostNote'
    ListNotification:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostNoteList'

  schemas:
    MatchingParameters:
      type: object
      properties:
        name_variants:
          type: array
          items:
            type: string
            example: "University of Jisc"
        postcodes:
          type: array
          items:
            type: string
            example: "BS20JA"
        domains:
          type: array
          items:
            type: string
            example: "jisc.ac.uk"
        grants:
          type: array
          items:
            type: string
            example: "0000-5555"
        author_ids:
          type: array
          items:
            $ref: "#/components/schemas/NoteIdentifier"

    MatchingParametersSuccess:
      type: object
      properties:
        name_variants:
          type: array
          items:
            type: string
            example: "University of Jisc"
        postcodes:
          type: array
          items:
            type: string
            example: "BS20JA"
        domains:
          type: array
          items:
            type: string
            example: "jisc.ac.uk"
        grants:
          type: array
          items:
            type: string
            example: "0000-5555"
        author_ids:
          type: array
          items:
            $ref: "#/components/schemas/NoteIdentifier"
        id:
          type: string
          example: "(UUID)"
        repository:
          type: string
          example: "(UUID)"
        created_date:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date

    BadRequest:
      type: object
      properties:
        error:
          type: string
          example: "Your request contained an error."

    PostNoteList:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: "publisher-unique-id"
          notification:
            $ref: '#/components/schemas/PostNote'

    PostNote:
      type: object
      properties:
        event:
          type: string
          example: accepted
        provider:
          type: object
          properties:
            agent:
              type: string
              example: Elsevier
            ref:
              type: string
              example: elsevier-unique-id
        content:
          type: object
          properties:
            packaging_format:
              type: string
              example: https://purl.org/net/SimpleZip
        links:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: "package"
                description: "type of content available at the URL, e.g. 'fulltext' or 'package' or 'splash'"
              format:
                type: string
                example: "application/pdf"
              url:
                type: string
                example: "https://publisher.com/fulltext-article.pdf"
        metadata:
          $ref: '#/components/schemas/NoteMetadata'

    NotificationSuccess:
      type: object
      properties:
        id:
          type: string
          example: "149f72cb93e345708cf924e432d4f996"
        location:
          type: string
          example: "/notification/149f72cb93e345708cf924e432d4f996"

    NotificationListCreated:
      type: object
      properties:
        successful:
          type: integer
          example: 2
        total:
          type: integer
          example: 2
        success_ids:
          type: array
          items:
            type: string
          example:
            - "publisher-id-1"
            - "publisher-id-2"
        fail_ids:
          type: array
          items:
            type: string
          example: []
        created_ids:
          type: array
          items:
            type: string
          example:
            - afe8bc55839d4b368f51304aae5fdcc6
            - cff2aa5da79447f6a9b9fa6dc849e208
        last_error:
          type: string

    NotificationListAccepted:
      type: object
      properties:
        successful:
          type: integer
          example: 1
        total:
          type: integer
          example: 2
        success_ids:
          type: array
          items:
            type: string
          example:
            - "publisher-id-1"
        fail_ids:
          type: array
          items:
            type: string
          example:
            - "publisher-id-2"
        created_ids:
          type: array
          items:
            type: string
          example:
            - "149f72cb93e345708cf924e432d4f996"
        last_error:
          type: string
          example: "Notification with ID 'publisher-id-2' failed: metadata was not a valid notification"

    RoutedSuccess:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 25
        total:
          type: integer
          example: 1234
        since:
          type: string
          format: date-time
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'

    Notification:
      type: object
      properties:
        id:
          type: string
          example: "ef0de02433e943feacd327917b3b3db7"
        created_date:
          type: string
          format: date
        analysis_date:
          type: string
          format: date-time
        event:
          type: string
          example: accepted
          description: "This attribute is unavailable for outgoing notifications"
        provider:
          type: object
          properties:
            agent:
              type: string
              example: Elsevier
        content:
          type: object
          properties:
            packaging_format:
              type: string
              example: https://purl.org/net/SimpleZip
        links:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: "package"
                description: Type of content available at the URL, e.g. "package" or "unpackaged" or "fulltext" or "splash"
              format:
                type: string
                example: "application/zip"
                description: The format of the content, for example "application/zip" or "application/pdf".
              url:
                type: string
              packaging:
                type: string
                example: "https://pubrouter.jisc.ac.uk/FilesAndJATS"
                description: This element which indicates the package-format is ONLY present where the content is a package stored on Router.
              access:
                type: string
                example: router
                description: Permitted access level, one of:<br><ul><li>"public" - content is at a 3rd party location</li><li>"router" - content is stored on Router</li><li>"special" - unpacked content is on Router.</li></ul><br> Content on Router is accessible only if a valid API-key is provided.
        metadata:
          $ref: '#/components/schemas/NoteMetadata'

    NoteMetadata:
      type: object
      properties:
        journal:
          $ref: '#/components/schemas/NoteJournal'
        article:
          $ref: '#/components/schemas/NoteArticle'
        contributor:
          type: array
          items:
            $ref: '#/components/schemas/NoteContributor'
        author:
          type: array
          items:
            $ref: '#/components/schemas/NoteContributor'
        accepted_date:
          type: string
          format: date
        publication_date:
          $ref: '#/components/schemas/NotePublicationDate'
        history_date:
          type: array
          items:
            $ref: '#/components/schemas/NoteHistoryDate'
        publication_status:
          type: string
        funding:
          type: array
          items:
            $ref: '#/components/schemas/NoteFunding'
        embargo:
          $ref: '#/components/schemas/NoteEmbargo'
        license_ref:
          type: array
          items:
            $ref: '#/components/schemas/NoteLicenseRef'
        free2read:
          type: object
          properties:
            start:
              type: string
              format: date
            end:
              type: string
              format: date
          description: "The `metadata.free2read` element may be deprecated in a future version of the API."

    NoteIdentifier:
      type: object
      properties:
        'type':
          type: string
        id:
          type: string

    NoteJournal:
      type: object
      properties:
        title:
          type: string
          example: Journal Title
        abbrev_title:
          type: string
          example: Abbreviated journal title
        volume:
          type: string
          example: "12"
        issue:
          type: string
          example: "32"
        publisher:
          type: array
          items:
            type: string
            example: Elsevier
        identifier:
          type: array
          items:
            $ref: '#/components/schemas/NoteIdentifier'

    NoteArticle:
      type: object
      properties:
        title:
          type: string
          example: Article title
        sub_title:
          type: array
          items:
            type: string
            example: Article subtitle
        'type':
          type: string
          example: Review
        'version':
          type: string
          example: VoR
        start_page:
          type: string
          example: 1
        end_page:
          type: string
          example: 10
        page_range:
          type: string
          example: "1-10"
        num_pages:
          type: integer
          example: 10
        language:
          type: array
          items:
            type: string
            example: English
        abstract:
          type: string
          example: Article abstract
        identifier:
          type: array
          items:
            $ref: '#/components/schemas/NoteIdentifier'
        subject:
          type: array
          items:
            type: string
            example: Article subject

    NoteContributor:
      type: object
      properties:
        'type':
          type: string
          example: author
        name:
          $ref: '#/components/schemas/NoteContributorName'
        organisation_name:
          type: string
          example: Jisc
        identifier:
          type: array
          items:
            $ref: '#/components/schemas/NoteIdentifier'
        affiliation:
          type: string
          example: Jisc United Kingdom

    NoteContributorName:
      type: object
      properties:
        firstname:
          type: string
          example: John
        surname:
          type: string
          example: Doe
        fullname:
          type: string
          example: John Doe
        suffix:
          type: string
          example: Sr.

    NotePublicationDate:
      type: object
      properties:
        publication_format:
          type: string
        date:
          type: string
          format: date
        year:
          type: integer
          example: 2018
        month:
          type: integer
          example: 8
        day:
          type: integer
          example: 20
        season:
          type: string
          example: "Spring"

    NoteHistoryDate:
      type: object
      properties:
        date_type:
          type: string
        date:
          type: string
          example: "'2020-03-01' or '2020-11' or '2021'"
          description: "A date field that accepts formats: YYYY-MM-DD, YYYY-MM, YYYY"

    NoteFunding:
      type: object
      properties:
        name:
          type: string
          example: Welcome Foundation
        identifier:
          type: array
          items:
            $ref: '#/components/schemas/NoteIdentifier'
        grant_numbers:
          type: array
          items:
            type: string

    NoteEmbargo:
      type: object
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date
        duration:
          type: integer
          example: 12

    NoteLicenseRef:
      type: object
      properties:
        title:
          type: string
          example: cc-by
        type:
          type: string
          example: Open licence
        url:
          type: string
          example: https://creativecommons.org/licenses/by-nc-sa/4.0/
        version:
          type: string
          example: "4.0"
        start:
          type: string
          format: date
        best:
          type: boolean

  responses:
    BadRequest:
      description: 400 - Bad request. Invalid submission
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'

    NoContent:
      description: 204 - No Content. Valid request

    BadApiKey:
      description: 401 - Unauthenticated. Missing/incorrect API key, or incorrect user type.
      content:
        application/json:
          examples:
            '0':
              value: |
                {
                  "error": "A valid API key is required."
                }
